generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  userName  String?   @unique
  name      String
  imageUrl  String
  email     String

  channels  Channel[]
  members   Member[]
  servers   Server[]
  userQuizDetails UserQuizDetails[]
  userProblemDetails UserProblemDetails[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String    @unique
  isPublic Boolean @default(false)

  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  channels   Channel[]
  members    Member[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)

  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  privateAccess Boolean @default(false)

  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid())
  content String

  fileUrl String?

  memberId String 
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String
  fileUrl String?

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Quiz {
  id              String   @id @default(uuid())
  topic           String
  quizTopic       String
  totalPoints     Int      @default(50)
  questionDetails Json
  
  userQuizDetails UserQuizDetails[]
}

model UserQuizDetails {
  id      String  @id @default(uuid())
  userId  String 
  quizId  String 
  topic   String
  quizTopic String
  completed Boolean @default(false)
  score   Int?
 
  user  Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  quiz  Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizId])
}

model Problem {
  id               String   @id @default(uuid())
  problemId        String   @unique
  problemNo        Int      @unique
  title            String
  difficulty       String
  category         String[]
  videoId          String?
  isNotParse       Boolean  @default(false)
  description      String[]
  image            String?
  functionSignature Json
  examples         Json
  constraints      String[]
  testCases        Json

  userProblemDetails UserProblemDetails[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model UserProblemDetails {
  id      String  @id @default(uuid())
  userId  String 
  problemId   String
  problemName String
  completed Boolean @default(false)
 
  user  Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, problemId])
}